<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>orelhas.in</title><link href="/" rel="alternate"></link><link href="/feeds/joao-gabriel.atom.xml" rel="self"></link><id>/</id><updated>2014-09-30T00:00:00+02:00</updated><entry><title>Debian Package with Bricklayer + Docker</title><link href="/bricklayer-docker.html" rel="alternate"></link><updated>2014-09-30T00:00:00+02:00</updated><author><name>Joao Gabriel</name></author><id>tag:,2014-09-30:bricklayer-docker.html</id><summary type="html">&lt;p&gt;Exists many ways to do a application's deploy, I particularly like to do with packages because besides being faster it's organized and if you need a rollback you'll only need to install a previous version. However if you've many apps it's impracticable you make a package for each one always when the dev wants to test a new version (With Bricklayer it's possible to make three releases; unstable, testing and stable). It here that the Bricklayer enters, it's watching the application's project in GIT and when you commit a new tag then it automatically build and upload the package to your configured repository, as you'll see below. With this Docker's image you'll have the Bricklayer, FTP and repository and you just need put the line with repo's URL in your /etc/apt/sources.list and start a new project in Bricklayer's UI. &lt;br&gt;
You can see more about Bricklayer in &lt;a href="http://bricklayer.readthedocs.org"&gt;http://bricklayer.readthedocs.org&lt;/a&gt;&lt;br&gt;
I'm assuming you already have the Docker installed. Here go, at first you need to download the Bricklayer container's image from Docker Hub or build it from Dockerfile, I recommend you to use the Dockerfile because exists many options that you probably will want to change, as server name, ftp password, dependencies for your apps etc. If you'll use the Docker Hub's image will need execute it with /bin/bash and do all changes and after make a new commit in that image.&lt;/p&gt;
&lt;p&gt;Using a Docker Hub's image:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# docker pull orelhinhas/bricklayer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Using a Dockerfile:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# git clone https://github.com/orelhinhas/bricklayer_docker.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# cd bricklayer_docker &amp;amp;&amp;amp; docker build -t bricklayer .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After the commands above finished you'll have something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Create a directory in your host to keep Bricklayer's logs and case you needed debug or see the progress of a specific build:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# mkdir /var/log/bricklayer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, let's start the container with Bricklayer&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# docker run -v /var/log/bricklayer:/var/lib/bricklayer/workspace/log -p 40000:80 -P orelhinhas/bricklayer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A brief description for above command:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;run&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;I believe that it's self explanatory :P&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;-v /var/log/brikclayer:/var/lib/bricklayer/workspace/log&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;ith this option docker will bypass UFS and you can access the Bricklayers's logs in container from your host&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;-p 40000:80&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;assign port 40000 from host to port 80 from container, this way you keep the same port in your repo's URL in sources.list, if you don't follow this every time that you start the Bricklayer's container a new randomic port will be assign and you'll need change every sources.list&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;-P&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Publish all ports that's exposed, in our case Redis and FTP. (Maybe you want to access redis-cli or log in FTP)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;orelhinhas/bricklayer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;path/name of image&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Ok, we have the output below:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker02.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker02.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;check the status of the container:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# docker ps&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker03.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker03.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Done, now we can add a new project and build our first package with the Bricklayer :D&lt;/p&gt;
&lt;p&gt;Access with the URL that you configured in SERVER_NAME at port 40000, in this case will be: &lt;em&gt;http://bricklayer.snowwhite:40000&lt;/em&gt; and you'll see something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker04.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker04.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For now only the first two tabs matter, At first "Projects" is where the build will be and the second tab "Groups" is where you configured the repositories that the packages will be uploaded.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker05.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker05.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this Docker image we already have a repository and FTP  configured but if you want to use other just add a new one.
Well, let's go to our first package, I'll not explain how how debianize your app, have a dozens of articles and how to's in the internet talking about it. :)
Go to the first tab "Projects" and look at button called "Create project", when you click it a window like below will appear:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker06.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker06.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;: put the package name&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git URL&lt;/strong&gt;: address of your GIT project (if you have a private repo will be need create a ssh key and put the address in this format: git@github.com:...)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;: Branch that you want to build your app package&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: you can put any numeric thing, because when you push a tag this version will be replaced for the right tag (in general I put 1.0.0)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Command and Install command&lt;/strong&gt;: it's not necessary by now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Group name&lt;/strong&gt;: Here you define for which repository you want to upload the package (if you have more than one repo).&lt;/p&gt;
&lt;p&gt;In our example we're packaging the Arachnid (https://www.github.com/Clubjudge/arachnid), an app made in NodeJS to index webcrawler.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker07.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker07.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After "Save changes" if you can see some informations about the build in /var/log/bricklayer/bricklayer.log.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker08.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker08.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In our example, it does two builds, one for stable release and other for testing release (Bricklayer get the last tag if exists then automatically does the build). Now, refresh your browser and you'll notice that exists two labels at right side, a green for stable release and orange for testing release.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker09.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker09.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click in the name of project and you can see some informations:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker010.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker010.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the top you have information about which repo this package was uploaded (if you have more than one), last commit and which branch this build was made. At bottom you have when the build was made, version and release, number of build and the most important: build log. If you don't want open a terminal to check the build or better, you don't want to give access in the box to developers, they can follow the build in realtime through this window.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker011.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker011.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Well, now let's suppose that you need for any reason build a new package with the unstable release and create a new stable package for production.
At first let's build the unstable package, go to the directory project and type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# git tag unstable_0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;by the way, the version doesn't need to be necessarily 0.0.1, could be any one that you want.&lt;/p&gt;
&lt;p&gt;Now, push the tag to git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# git push --tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Well done, refresh your browser and see that exist a new red label :D&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker012.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker012.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To build new versions just commit a new tag but it's very important pay attention that the version &lt;strong&gt;MUST BE incremental&lt;/strong&gt; because if you push a tag with a previous version that the last build, the Bricklayer will not work.&lt;/p&gt;
&lt;p&gt;Ok, we're almost done. We've one package per release and it already in the repository, configure your &lt;em&gt;/etc/apt/sources.list&lt;/em&gt; in this way:&lt;/p&gt;
&lt;p&gt;deb http://HOST_SERVER_NAME:PORT_CONTAINER/packages/ RELEASE main&lt;/p&gt;
&lt;p&gt;in our case:&lt;/p&gt;
&lt;p&gt;# stable repository&lt;/p&gt;
&lt;p&gt;deb http://snowwhite:40000/packages/ stable main&lt;/p&gt;
&lt;p&gt;# testing repository&lt;/p&gt;
&lt;p&gt;deb http://snowwhite:40000/packages/ testing main&lt;/p&gt;
&lt;p&gt;# unstable repository&lt;/p&gt;
&lt;p&gt;deb http://snowwhite:40000/packages/ unstable main&lt;/p&gt;
&lt;p&gt;Just make sure that this package doesn't exist in my current configured debian repository in this server:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker013.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker013.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Add our new repo (notice the last line):&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker014.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker014.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and see the result of &lt;code&gt;apt-get update&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker015.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker015.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and now:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker016.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker016.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is there :D, now you just install it :D&lt;/p&gt;
&lt;p&gt;Obs:&lt;/p&gt;
&lt;p&gt;This docker image is already able to build Ruby apps, but for this it's necessary you know some details. Is installed two Ruby versions (1.9.3-p547 and ruby-2.1.2) via RVM (yes, it's bad but needed). To the Bricklayer build your app with the right version of Ruby you need to put a .rvmrc.example file in app root with the follow content for example:&lt;/p&gt;
&lt;p&gt;rvm 2.1.2@myapp &lt;/p&gt;
&lt;p&gt;and RVM need to be with SYSTEM in "current &amp;amp; default" like below:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/bricklayer_docker017.jpg"&gt;&lt;img alt="alt text" src="images/thumb/thumbnail_tall/bricklayer_docker017.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have any doubt or difficult or review please let me know :)&lt;/p&gt;
&lt;p&gt;Joao Gabriel &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#106;&amp;#103;&amp;#108;&amp;#105;&amp;#115;&amp;#97;&amp;#110;&amp;#116;&amp;#105;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#106;&amp;#103;&amp;#108;&amp;#105;&amp;#115;&amp;#97;&amp;#110;&amp;#116;&amp;#105;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;</summary><category term="bricklayer"></category><category term="docker"></category><category term="debian"></category><category term="packages"></category></entry></feed>